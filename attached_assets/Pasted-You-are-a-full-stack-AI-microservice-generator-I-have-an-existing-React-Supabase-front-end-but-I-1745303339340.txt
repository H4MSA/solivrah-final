You are a full‑stack AI microservice generator. I have an existing React + Supabase front end, but I want to remove all my old AI code and replace it with a single backend service in Node.js (Express) that exposes these endpoints:

1. POST /assistant  
   • Accepts { userId, message, mood }  
   • Reads/writes conversation history to Supabase  
   • Uses OpenAI (or DeepSeek via OpenRouter) to generate empathic coaching replies, based on tone analysis and memory of past chats  
   • Returns { reply, updatedContext }

2. POST /chatbot  
   • Accepts { userId, message, personalitySettings }  
   • Retrieves conversation history, applies personality “playful” or “professional”  
   • Calls LLM to generate a friendly, witty reply and saves it  
   • Returns { reply }

3. POST /roadmap  
   • Accepts { userId, goals: string, struggles: string, dailyTime: number }  
   • Builds a SMART‑goal prompt and calls LLM to produce a 30‑day plan in JSON (day, title, description, xp)  
   • Stores the roadmap in Supabase and returns it

4. GET /roadmap/:userId  
   • Fetches the latest roadmap from Supabase

5. POST /mood-journal  
   • Accepts { userId, mood, notes }  
   • Saves entry to Supabase and returns weekly mood trend data

6. POST /verify-photo  
   • Accepts multipart file upload + { userId, questId }  
   • Calls LLM or vision API to confirm task completion  
   • Updates verification_status in Supabase and returns { status }

For all endpoints:  
• Use environment variables for SUPABASE_URL, SUPABASE_KEY, AI_API_KEY.  
• Implement error handling and logging.  
• Follow REST best practices and return JSON with HTTP status codes.  
• Include request validation.  
• Ensure all data is encrypted in transit and at rest.  

Generate a complete Express (or FastAPI) project:  
– `package.json` (or `requirements.txt`) with necessary dependencies (express, @supabase/supabase‑js, openai or openrouter, multer for file uploads, cors, dotenv)  
– `index.js` (or `main.py`) with route definitions  
– `services/` folder: SupabaseService, AIService, PhotoVerificationService  
– README.md explaining how to set secrets in Replit and how to test each endpoint

Do not include any front‑end code—just the backend microservice. Make the code production‑ready and clearly commented. Start from scratch: remove any old Supabase AI logic and replace it with this new service.
