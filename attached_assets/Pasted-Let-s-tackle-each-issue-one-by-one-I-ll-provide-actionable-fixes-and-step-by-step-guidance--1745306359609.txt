Let‚Äôs tackle each issue one by one. I‚Äôll provide **actionable fixes** and **step-by-step guidance** to resolve the problems. Let‚Äôs start with the **Goal Card**, **QR scanner**, **AI Coach**, and **Vercel deployment**.

---

### **1. Goal Card Shows Same Example for Each Theme**  
**Problem**: The goal card isn‚Äôt updating with theme-specific content.  

#### **Fix**:  
**Step 1: Check Theme Data Mapping**  
Ensure your theme data is correctly linked to the `GoalCard` component. For example:  
```javascript
// Example code structure
const ThemeContext = React.createContext();

function App() {
  const [selectedTheme, setSelectedTheme] = useState("default");
  
  return (
    <ThemeContext.Provider value={{ selectedTheme }}>
      <GoalCard />
    </ThemeContext.Provider>
  );
}

function GoalCard() {
  const { selectedTheme } = useContext(ThemeContext);
  const themeData = getThemeData(selectedTheme); // Fetch theme-specific goals
  
  return (
    <div>
      <h2>{themeData.goalExample}</h2>
    </div>
  );
}
```

**Step 2: Verify Dynamic Data Fetching**  
Ensure `getThemeData()` fetches or returns **unique data** for each theme. For example:  
```javascript
function getThemeData(theme) {
  switch (theme) {
    case "productivity":
      return { goalExample: "Complete 5 tasks today!" };
    case "health":
      return { goalExample: "Drink 8 glasses of water." };
    default:
      return { goalExample: "Default goal" };
  }
}
```

**Step 3: Force Re-render When Theme Changes**  
If the `GoalCard` doesn‚Äôt re-render when the theme changes, add a `key` prop to the component:  
```javascript
<GoalCard key={selectedTheme} />
```

---

### **2. QR Code Scanner and Permissions Not Working**  
**Problem**: Camera access and uploads aren‚Äôt working.  

#### **Fix**:  
**Step 1: Enable Camera Permissions**  
- **For React Native**:  
  - Add `CAMERA` and `READ_EXTERNAL_STORAGE` permissions in `AndroidManifest.xml` (Android) and `Info.plist` (iOS).  
  - Use a library like `react-native-camera` or `expo-barcode-scanner`.  

  Example with Expo:  
  ```javascript
  import * as Permissions from 'expo-permissions';
  import { BarCodeScanner } from 'expo-barcode-scanner';

  async function requestCameraPermission() {
    const { status } = await BarCodeScanner.requestPermissionsAsync();
    if (status !== 'granted') {
      alert('Permission to camera not granted');
    }
  }

  // Call this when the user taps the QR scanner button
  useEffect(() => {
    requestCameraPermission();
  }, []);
  ```

- **For Web Apps**:  
  Use `navigator.mediaDevices.getUserMedia()` and handle permissions via browser prompts.  

**Step 2: Debug Uploads**  
- Ensure your backend API for uploads is correctly configured.  
- Check for CORS issues if deploying to Vercel (see below for Vercel fixes).  
- Use tools like `axios` or `fetch` to test uploads in isolation.  

---

### **3. AI Coach and Roadmaps Not Working**  
**Problem**: The AI Coach and Roadmap features aren‚Äôt functioning.  

#### **Fix**:  
**Step 1: Check API Endpoints**  
- Ensure your backend (e.g., Node.js, Python) is running and the endpoints for AI Coach and Roadmaps are correctly deployed.  
- Test endpoints with tools like Postman or `curl`:  
  ```bash
  curl -X POST "https://your-backend.com/api/roadmap" --data '{"theme": "productivity"}'
  ```

**Step 2: Validate Feature Code**  
- Ensure the frontend components (e.g., `AICoach`, `RoadmapBuilder`) are properly connected to your API.  
- Add `console.log` statements to check if data is being fetched and rendered.  

**Step 3: Handle Errors Gracefully**  
Add error boundaries to catch failures:  
```javascript
function ErrorBoundary({ children }) {
  const [hasError, setHasError] = useState(false);

  return hasError ? (
    <div>Something went wrong. Please try again later.</div>
  ) : (
    <div>{children}</div>
  );
}

// Wrap your AI Coach component:
<ErrorBoundary>
  <AICoach />
</ErrorBoundary>
```

---

### **4. Vercel Deployment Shows 404 on Refresh/Reload**  
**Problem**: The app returns a 404 when refreshing or directly accessing routes.  

#### **Fix**:  
**Step 1: Configure Vercel Rewrites**  
Vercel requires a rewrite rule to handle client-side routing (e.g., React Router). Create a `vercel.json` file in your project root:  
```json
{
  "rewrites": [
    {
      "source": "/(.*)",
      "destination": "/"
    }
  ]
}
```

**Step 2: Ensure Correct Build Settings**  
- For React apps, ensure your `package.json` has:  
  ```json
  "homepage": "./",
  "scripts": {
    "predeploy": "npm run build",
    "deploy": "vercel"
  }
  ```
- Rebuild and redeploy after making changes.  

**Step 3: Test Locally First**  
Use `npm run build` and serve the `build` folder locally to replicate the issue. If it works locally, the problem is likely deployment-specific.  

---

### **Final Checklist**  
1. **Restart the App**: Sometimes, cached data or builds cause issues.  
2. **Check Console Logs**: Look for errors in the browser console or terminal.  
3. **Test in Incognito/Private Mode**: Clear browser cache to avoid old code.  

Let me know which fix you‚Äôre implementing first‚ÄîI‚Äôll help troubleshoot further! üõ†Ô∏è